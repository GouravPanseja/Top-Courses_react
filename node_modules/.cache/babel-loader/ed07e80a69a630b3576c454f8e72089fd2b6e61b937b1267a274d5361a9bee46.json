{"ast":null,"code":"var _jsxFileName = \"/Users/gouravpanseja/Desktop/Web_development/webD/React/react_folio/top-course/src/components/Cards.js\",\n  _s = $RefreshSig$();\nimport Card from './Card';\nimport { React, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cards(props) {\n  _s();\n  let courses = props.courses;\n  let category = props.category; //initially none course is liked, it can be considered an array of all undefineds or undefined overall\n  const [likedCourses, setLikedCourses] = useState([]); // made state var so that every time it is updated bcz of liking we must re-render\n\n  if (courses === undefined || courses === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Courses Not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this);\n  }\n  function getCourses() {\n    if (category === \"All\") {\n      let allCourses = []; //likedCourses[] will contain the id of all the cards that are liked\n      Object.values(courses).forEach(array => {\n        array.forEach(courseData => {\n          allCourses.push(courseData);\n        });\n      });\n      return allCourses;\n    } else {\n      //return only the array of only specific spaces\n      return courses[category];\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap justify-center gap-4 mb-4\",\n    children: getCourses().map(course => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        course: course,\n        likedCourses: likedCourses,\n        setLikedCourses: setLikedCourses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Cards, \"Q7AYBZdLuwoSxOsj9b2DqoUpYLg=\");\n_c = Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Card","React","useState","jsxDEV","_jsxDEV","Cards","props","_s","courses","category","likedCourses","setLikedCourses","undefined","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getCourses","allCourses","Object","values","forEach","array","courseData","push","map","course","_c","$RefreshReg$"],"sources":["/Users/gouravpanseja/Desktop/Web_development/webD/React/react_folio/top-course/src/components/Cards.js"],"sourcesContent":["import Card from './Card';\nimport {React,useState} from 'react';\n\n\nexport default  function Cards(props){\n\n   \n    let courses = props.courses;\n    let category= props.category;                          //initially none course is liked, it can be considered an array of all undefineds or undefined overall\n    const [likedCourses,setLikedCourses]= useState([]);     // made state var so that every time it is updated bcz of liking we must re-render\n    \n    if(courses===undefined || courses===null){\n        return ( \n        <div className=\"error-screen\">\n            <div>\n                <p>Courses Not found</p>\n            </div>\n        </div>\n            )\n\n           \n        \n    }\n    function getCourses(){  \n      \n        if(category===\"All\"){\n\n           let allCourses= [];                              //likedCourses[] will contain the id of all the cards that are liked\n            Object.values(courses).forEach( array=>{\n                array.forEach((courseData)=>{\n                    allCourses.push(courseData);\n                })\n            })   \n            \n            return allCourses;    \n        }\n\n        else{\n            //return only the array of only specific spaces\n            return courses[category];\n        }\n                                                        \n                                    \n  \n    }\n  \n\n    return(\n        <div className='flex flex-wrap justify-center gap-4 mb-4'>\n        {\n            getCourses().map((course)=> {\n              return(\n                <Card course= {course}\n                    likedCourses={likedCourses}\n                    setLikedCourses={setLikedCourses}\n\n                />);\n                \n            })\n        \n        }\n        </div>\n    );\n}"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,SAAQC,KAAK,EAACC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGrC,eAAgB,SAASC,KAAKA,CAACC,KAAK,EAAC;EAAAC,EAAA;EAGjC,IAAIC,OAAO,GAAGF,KAAK,CAACE,OAAO;EAC3B,IAAIC,QAAQ,GAAEH,KAAK,CAACG,QAAQ,CAAC,CAA0B;EACvD,MAAM,CAACC,YAAY,EAACC,eAAe,CAAC,GAAET,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAK;;EAExD,IAAGM,OAAO,KAAGI,SAAS,IAAIJ,OAAO,KAAG,IAAI,EAAC;IACrC,oBACAJ,OAAA;MAAKS,SAAS,EAAC,cAAc;MAAAC,QAAA,eACzBV,OAAA;QAAAU,QAAA,eACIV,OAAA;UAAAU,QAAA,EAAG;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACtB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAKV;EACA,SAASC,UAAUA,CAAA,EAAE;IAEjB,IAAGV,QAAQ,KAAG,KAAK,EAAC;MAEjB,IAAIW,UAAU,GAAE,EAAE,CAAC,CAA8B;MAChDC,MAAM,CAACC,MAAM,CAACd,OAAO,CAAC,CAACe,OAAO,CAAEC,KAAK,IAAE;QACnCA,KAAK,CAACD,OAAO,CAAEE,UAAU,IAAG;UACxBL,UAAU,CAACM,IAAI,CAACD,UAAU,CAAC;QAC/B,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAOL,UAAU;IACrB,CAAC,MAEG;MACA;MACA,OAAOZ,OAAO,CAACC,QAAQ,CAAC;IAC5B;EAIJ;EAGA,oBACIL,OAAA;IAAKS,SAAS,EAAC,0CAA0C;IAAAC,QAAA,EAErDK,UAAU,EAAE,CAACQ,GAAG,CAAEC,MAAM,IAAI;MAC1B,oBACExB,OAAA,CAACJ,IAAI;QAAC4B,MAAM,EAAGA,MAAO;QAClBlB,YAAY,EAAEA,YAAa;QAC3BC,eAAe,EAAEA;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAEnC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAGA;AAEd;AAACX,EAAA,CA3DwBF,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}